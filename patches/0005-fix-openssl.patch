From 43ca9820a0e2d1341c62b7c526b5793288f2c0bd Mon Sep 17 00:00:00 2001
From: dkd-azure <dkd-azure>
Date: Wed, 26 Aug 2015 14:17:35 +0200
Subject: [PATCH 5/6] fix openssl

---
 .../install/Classes/SystemEnvironment/Check.php    |   8 +-
 .../rsaauth/Classes/Backend/AjaxLoginHandler.php   |   5 +-
 .../sysext/rsaauth/Classes/Backend/PhpBackend.php  | 206 +++++++++++----------
 typo3/sysext/rsaauth/Classes/Backend/openssl.cnf   |   9 +
 typo3conf/AdditionalConfiguration.php              |   1 +
 typo3conf/openssl.cnf                              |   9 +
 6 files changed, 134 insertions(+), 104 deletions(-)
 create mode 100644 typo3/sysext/rsaauth/Classes/Backend/openssl.cnf
 create mode 100644 typo3conf/openssl.cnf

diff --git a/typo3/sysext/install/Classes/SystemEnvironment/Check.php b/typo3/sysext/install/Classes/SystemEnvironment/Check.php
index 5e0bf66..1624d63 100644
--- a/typo3/sysext/install/Classes/SystemEnvironment/Check.php
+++ b/typo3/sysext/install/Classes/SystemEnvironment/Check.php
@@ -597,9 +597,11 @@ class Check {
 	 * @return Status\StatusInterface
 	 */
 	protected function checkOpenSslInstalled() {
-		if (extension_loaded('openssl')) {
-			$testKey = @openssl_pkey_new();
-			if (is_resource($testKey)) {
+        if (extension_loaded('openssl')) {
+            //AdditionalConfiguration is not loaded yet, so we have to hardcore the path
+            $configPath = realpath(dirname(__FILE__) . "/../../../../../typo3conf/openssl.cnf");
+            $testKey = @openssl_pkey_new(array('config' => $configPath));
+            if (is_resource($testKey)) {
 				openssl_free_key($testKey);
 				$status = new Status\OkStatus();
 				$status->setTitle('PHP OpenSSL extension installed properly');
diff --git a/typo3/sysext/rsaauth/Classes/Backend/AjaxLoginHandler.php b/typo3/sysext/rsaauth/Classes/Backend/AjaxLoginHandler.php
index f12cc3c..4116ed9 100644
--- a/typo3/sysext/rsaauth/Classes/Backend/AjaxLoginHandler.php
+++ b/typo3/sysext/rsaauth/Classes/Backend/AjaxLoginHandler.php
@@ -28,8 +28,9 @@ class AjaxLoginHandler {
 	 */
 	public function getRsaPublicKey(array $parameters, \TYPO3\CMS\Core\Http\AjaxRequestHandler $parent) {
 		\TYPO3\CMS\Core\Utility\GeneralUtility::logDeprecatedFunction();
-		$rsaEncryptionEncoder = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstance(\TYPO3\CMS\Rsaauth\RsaEncryptionEncoder::class);
-		$rsaEncryptionEncoder->getRsaPublicKeyAjaxHandler($parameters, $parent);
+        putenv("OPENSSL_CONF=" . dirname(__FILE__) . "\..\..\..\..\..\typo3conf\AdditionalConfiguration.php");
+        $rsaEncryptionEncoder = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstance(\TYPO3\CMS\Rsaauth\RsaEncryptionEncoder::class);
+        $rsaEncryptionEncoder->getRsaPublicKeyAjaxHandler($parameters, $parent);
 	}
 
 }
\ No newline at end of file
diff --git a/typo3/sysext/rsaauth/Classes/Backend/PhpBackend.php b/typo3/sysext/rsaauth/Classes/Backend/PhpBackend.php
index 2d08f1e..3640903 100644
--- a/typo3/sysext/rsaauth/Classes/Backend/PhpBackend.php
+++ b/typo3/sysext/rsaauth/Classes/Backend/PhpBackend.php
@@ -20,111 +20,119 @@ namespace TYPO3\CMS\Rsaauth\Backend;
  * backends.
  */
 class PhpBackend extends AbstractBackend {
-	/**
-	 * Creates a new key pair for the encryption or gets the existing key pair (if one already has been generated).
-	 *
-	 * There should only be one key pair per request because the second private key would overwrites the first private
-	 * key. So the submitting the form with the first public key would not work anymore.
-	 *
-	 * @return \TYPO3\CMS\Rsaauth\Keypair|NULL a key pair or NULL in case of error
-	 */
-	public function createNewKeyPair() {
-		/** @var $keyPair \TYPO3\CMS\Rsaauth\Keypair */
-		$keyPair = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstance(\TYPO3\CMS\Rsaauth\Keypair::class);
-		if ($keyPair->isReady()) {
-			return $keyPair;
-		}
+    /**
+     * On AZURE we set the env in AdditionalConfiguration.php
+     */
+    private static function OpenSSLConfig() {
+        $w = array('config' => dirname(__FILE__) . "\openssl.cnf");
+        return $w;
+    }
 
-		$privateKey = @openssl_pkey_new();
-		if ($privateKey !== FALSE) {
-			// Create private key as string
-			$privateKeyStr = '';
-			openssl_pkey_export($privateKey, $privateKeyStr);
-			// Prepare public key information
-			$exportedData = '';
-			$csr = openssl_csr_new(array(
-				'localityName' => 'foo',
-				'organizationName' => 'bar',
-			), $privateKey);
-			openssl_csr_export($csr, $exportedData, FALSE);
-			// Get public key (in fact modulus) and exponent
-			$publicKey = $this->extractPublicKeyModulus($exportedData);
-			$exponent = $this->extractExponent($exportedData);
+    /**
+     * Creates a new key pair for the encryption or gets the existing key pair (if one already has been generated).
+     *
+     * There should only be one key pair per request because the second private key would overwrites the first private
+     * key. So the submitting the form with the first public key would not work anymore.
+     *
+     * @return \TYPO3\CMS\Rsaauth\Keypair|NULL a key pair or NULL in case of error
+     */
+    public function createNewKeyPair() {
+        /** @var $keyPair \TYPO3\CMS\Rsaauth\Keypair */
+        $keyPair = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstance(\TYPO3\CMS\Rsaauth\Keypair::class);
+        if ($keyPair->isReady()) {
+            return $keyPair;
+        }
 
-			$keyPair->setExponent($exponent);
-			$keyPair->setPrivateKey($privateKeyStr);
-			$keyPair->setPublicKey($publicKey);
-			// Clean up all resources
-			openssl_free_key($privateKey);
-		} else {
-			$keyPair = NULL;
-		}
+        $privateKey = @openssl_pkey_new(self::OpenSSLConfig());
+        if ($privateKey !== FALSE) {
+            // Create private key as string
+            $privateKeyStr = '';
+            openssl_pkey_export($privateKey, $privateKeyStr, NULL, self::OpenSSLConfig());
+            // Prepare public key information
+            $exportedData = '';
+            $csr = openssl_csr_new(array(
+                'localityName' => 'foo',
+                'organizationName' => 'bar',
+            ), $privateKey, self::OpenSSLConfig());
+            openssl_csr_export($csr, $exportedData, FALSE);
+            // Get public key (in fact modulus) and exponent
+            $publicKey = $this->extractPublicKeyModulus($exportedData);
+            $exponent = $this->extractExponent($exportedData);
 
-		return $keyPair;
-	}
+            $keyPair->setExponent($exponent);
+            $keyPair->setPrivateKey($privateKeyStr);
+            $keyPair->setPublicKey($publicKey);
+            // Clean up all resources
+            openssl_free_key($privateKey);
+        } else {
+            $keyPair = NULL;
+        }
 
-	/**
-	 * Decrypts data using the private key. This implementation uses PHP OpenSSL
-	 * extension.
-	 *
-	 * @param string $privateKey The private key (obtained from a call to createNewKeyPair())
-	 * @param string $data Data to decrypt (base64-encoded)
-	 * @return string|NULL Decrypted data or NULL in case of an error
-	 * @see \TYPO3\CMS\Rsaauth\Backend\AbstractBackend::decrypt()
-	 */
-	public function decrypt($privateKey, $data) {
-		$result = '';
-		if (!@openssl_private_decrypt(base64_decode($data), $result, $privateKey)) {
-			$result = NULL;
-		}
-		return $result;
-	}
+        return $keyPair;
+    }
 
-	/**
-	 * Checks if this backend is available for calling. In particular checks if
-	 * PHP OpenSSl extension is installed and functional.
-	 *
-	 * @return bool
-	 * @see \TYPO3\CMS\Rsaauth\Backend\AbstractBackend::isAvailable()
-	 */
-	public function isAvailable() {
-		$result = FALSE;
-		if (is_callable('openssl_pkey_new')) {
-			// PHP extension has to be configured properly. It
-			// can be installed and available but will not work unless
-			// properly configured. So we check if it works.
-			$testKey = @openssl_pkey_new();
-			if (is_resource($testKey)) {
-				openssl_free_key($testKey);
-				$result = TRUE;
-			}
-		}
-		return $result;
-	}
+    /**
+     * Decrypts data using the private key. This implementation uses PHP OpenSSL
+     * extension.
+     *
+     * @param string $privateKey The private key (obtained from a call to createNewKeyPair())
+     * @param string $data Data to decrypt (base64-encoded)
+     * @return string|NULL Decrypted data or NULL in case of an error
+     * @see \TYPO3\CMS\Rsaauth\Backend\AbstractBackend::decrypt()
+     */
+    public function decrypt($privateKey, $data) {
+        $result = '';
+        if (!@openssl_private_decrypt(base64_decode($data), $result, $privateKey)) {
+            $result = NULL;
+        }
+        return $result;
+    }
 
-	/**
-	 * Extracts the exponent from the OpenSSL CSR
-	 *
-	 * @param string $data The result of openssl_csr_export()
-	 * @return int The exponent as a number
-	 */
-	protected function extractExponent($data) {
-		$index = strpos($data, 'Exponent: ');
-		// We do not check for '$index === FALSE' because the exponent is
-		// always there!
-		return (int)substr($data, $index + 10);
-	}
+    /**
+     * Checks if this backend is available for calling. In particular checks if
+     * PHP OpenSSl extension is installed and functional.
+     *
+     * @return bool
+     * @see \TYPO3\CMS\Rsaauth\Backend\AbstractBackend::isAvailable()
+     */
+    public function isAvailable() {
+        $result = FALSE;
+        if (is_callable('openssl_pkey_new')) {
+            // PHP extension has to be configured properly. It
+            // can be installed and available but will not work unless
+            // properly configured. So we check if it works.
+            $testKey = @openssl_pkey_new(self::OpenSSLConfig());
+            if (is_resource($testKey)) {
+                openssl_free_key($testKey);
+                $result = TRUE;
+            }
+        }
+        return $result;
+    }
 
-	/**
-	 * Extracts public key modulus from the OpenSSL CSR.
-	 *
-	 * @param string $data The result of openssl_csr_export()
-	 * @return string Modulus as uppercase hex string
-	 */
-	protected function extractPublicKeyModulus($data) {
-		$fragment = preg_replace('/.*Modulus.*?\\n(.*)Exponent:.*/ms', '\\1', $data);
-		$fragment = preg_replace('/[\\s\\n\\r:]/', '', $fragment);
-		return trim(strtoupper(substr($fragment, 2)));
-	}
+    /**
+     * Extracts the exponent from the OpenSSL CSR
+     *
+     * @param string $data The result of openssl_csr_export()
+     * @return int The exponent as a number
+     */
+    protected function extractExponent($data) {
+        $index = strpos($data, 'Exponent: ');
+        // We do not check for '$index === FALSE' because the exponent is
+        // always there!
+        return (int)substr($data, $index + 10);
+    }
+
+    /**
+     * Extracts public key modulus from the OpenSSL CSR.
+     *
+     * @param string $data The result of openssl_csr_export()
+     * @return string Modulus as uppercase hex string
+     */
+    protected function extractPublicKeyModulus($data) {
+        $fragment = preg_replace('/.*Modulus.*?\\n(.*)Exponent:.*/ms', '\\1', $data);
+        $fragment = preg_replace('/[\\s\\n\\r:]/', '', $fragment);
+        return trim(strtoupper(substr($fragment, 2)));
+    }
 
 }
diff --git a/typo3/sysext/rsaauth/Classes/Backend/openssl.cnf b/typo3/sysext/rsaauth/Classes/Backend/openssl.cnf
new file mode 100644
index 0000000..df37c3d
--- /dev/null
+++ b/typo3/sysext/rsaauth/Classes/Backend/openssl.cnf
@@ -0,0 +1,9 @@
+# this is an fuzzyily constructed minimal openssl config file
+# to allow the use of the openssl_pkey_new and openssl_csr_new
+# and openssl_csr_export functions in php
+[ req ]
+default_bits = 2048
+distinguished_name = req_distinguished_name
+[ req_distinguished_name ]
+[ v3_req ]
+[ v3_ca ]
diff --git a/typo3conf/AdditionalConfiguration.php b/typo3conf/AdditionalConfiguration.php
index 1a7ad35..053aa28 100644
--- a/typo3conf/AdditionalConfiguration.php
+++ b/typo3conf/AdditionalConfiguration.php
@@ -28,6 +28,7 @@ $types = array(
  "extbase_typo3dbbackend_queries",
  "extbase_datamapfactory_datamap",
 );
+
 foreach ($types as $ct) {
     $GLOBALS['TYPO3_CONF_VARS']['SYS']['caching']['cacheConfigurations'][$ct]['backend'] = 'TYPO3\\CMS\\Core\\Cache\\Backend\\WincacheBackend';
     $GLOBALS['TYPO3_CONF_VARS']['SYS']['caching']['cacheConfigurations'][$ct]['options'] = array();
diff --git a/typo3conf/openssl.cnf b/typo3conf/openssl.cnf
new file mode 100644
index 0000000..df37c3d
--- /dev/null
+++ b/typo3conf/openssl.cnf
@@ -0,0 +1,9 @@
+# this is an fuzzyily constructed minimal openssl config file
+# to allow the use of the openssl_pkey_new and openssl_csr_new
+# and openssl_csr_export functions in php
+[ req ]
+default_bits = 2048
+distinguished_name = req_distinguished_name
+[ req_distinguished_name ]
+[ v3_req ]
+[ v3_ca ]
-- 
1.9.4.msysgit.1

